회사소개는 넘어가겠습니다.

p.4 
수행한 업무 내용을 말씀드리겠습니다. 
저희는 대표님께서 하라고 하신 것을 하고, 피드백을 받는 형식으로 실습을 하고 있습니다.

1주차에는 클래스 다이어그램을 작성했습니다.
출시된 하이퍼 캐쥬얼 장르의 게임 중 '궁수의 전설' 이라는 게임를 선택해서 클래스 다이어 그램을 작성했습니다.

p.5
클래스 다이어그램은 클래스 내부의 내용, 상속, 연관 등 클래스 간의 관계를 표시하여 구조를 볼 수 있습니다.
클래스가 어떤 관계를 갖고 있는지 파악하는 것도 오래 걸렸습니다.

예로, 저는 스킬, 어빌리티를 나누고, 캐릭터가 자신의 스탯을 가지고 있게 만들었습니다.
하지만 대표님 께서는 스킬, 어빌리티 모두 캐릭터의 스탯을 변경하는 역할을 가지고 있으니
스탯에 대한 데이터만 가지고있는 클래스를 만들어서 한번에 관리를 하는 것이 좋다고 말씀하셨습니다.

p.6
기존 게임의 클래스 다이어그램을 완성하지는 않았지만 이정도의 틀을 가지고,
직접 만들 게임의 클래스 다이어그램을 작성했습니다.

저번 피드백을 통해, 캐릭터의 스탯을 갖는 Data클래스를 만들고 필요한 곳에서 사용하게 만들었습니다.
이런 구조로 게임을 만들어야 겠다는 방향을 잡았습니다.


p.7
2주차부터는 구현을 시작했습니다.
먼저 게임 플레이영상을 보겠습니다.

유니티를 이용해서 간단한 하이퍼 캐쥬얼 장르의 게임을 제작하였습니다.
이 게임은 좌우로 움직이며 몰려오는 적을 공격하는 게임입니다.

그래픽적인 부분은 업무에서 중요하지 않아서 공격모션, 애니메이션은 따로 구현하지 않았습니다.

(영상 다시 시작하고)
오른쪽 하이어래키 창을 보면 게임 시작전에는 메인카메라와 빈 게임오브젝트인 - 런처 만 있습니다. 

p.8
런처도 컴포넌트로 MyLauncher라는 스크립트 하나만 있습니다.

게임을 제작하는 과정에서 
유니티 에디터 상으로 오브젝트를 배치하고 각각의 오브젝트에 스크립트를 연결하는 방식이 아닌
스크립트 상으로 모든 것을 해결하는 방식으로 제작하고 있습니다.

실무에서는 개발자들이 엔진을 이렇게 사용한다고 합니다.

p.9
에디터를 사용하지 않고, 스크립트로 해결 하려다 보니, 오브젝트 생성, 배치부터 막혔습니다. 

프리팹을 만들고, 그 프리팹을 리소스로 불러와서 인스턴스화해서 게임오브젝트로 만들어야 했습니다.
이 코드는 프리팹을 게임오브젝트로 만드는 코드라 보시면 됩니다.

게임 제작 자체는 2주차에 완료했습니다. 하지만 5주차인 지금까지 계속 코드를 수정하고 있습니다.
그 이유는 클래스 분리에 있습니다.

클래스를 분리하는 가장 큰 이유중 하나는 재사용이 아닐까 싶습니다.
하나의 역할만 담당하는 클래스를 만들어, 조금의 수정으로 어디서든 활용할 수 있는데 목적을 두는 거라 생각합니다.

이 사진의 클래스는 프리팹과 인스턴스화하는 역할만 합니다.
따라서 재사용이 가능한 클래스입니다. 


2주차에 구현한 코드는 Monobehaviour을 상속받는 Launcher라는 클래스에서 대부분의 역할을 했습니다.

이 슈퍼 클래스를 최대한 많이, 그리고 적절하게 분리해야 했습니다.
3,4주차 초반까지는 클래스 분리에 중점을 두었습니다. 이것 역시 쉽지가 않았습니다. 
하나의 역할만 하는 클래스를 만들고 싶은데 계속해서 엮이는 클래스가 생겼습니다.

나름 분리를 해 봤지만 아직까지도 한 클래스에서 많은 역할을 하고 있습니다. 
더이상 어떻게 분리해야 할지 모르겠어서 4주차 중간에 피드백을 요청했습니다.

p.10
매 프레임마다 확인하는 Monobehaviour의 Update()함수로 게임을 클리어했을 때, 캐릭터가 죽었을 때 등등 여러 조건들을 판별하고 있습니다.
변경된 내용이 없어도 프레임마다 조건을 확인하고 있기 때문에 비효율적이라는 피드백을 받았습니다.

이렇게 매 프레임마다 조건을 검사하지 말고, 이벤트 트리거를 통해 변경사항이 생기면 이벤트를 호출하고, 그 때만 조건을 판별하는 식으로
코드를 작성하라는 대표님의 말씀을 듣고 이벤트 트리거를 공부하고 있습니다.


p.11 
(성과)
에디터가 아닌 스크립트를 통해 개발을 하면서 실무에서 엔진을 어떻게 사용하는지 약간의 경험을 할 수 있었습니다.
또한 클래스의 분리에 대한 필요성을 체감했습니다.

(소견)
인터넷 자료로는 원하는 정보를 얻기가 힘들었습니다. 에디터를 사용하는 것이 대부분이었고,
스크립트를 작성하는 것을 찾아보아도 직접적으로 도움이 되는 자료는 많이 없었습니다.

배운적 없는 내용을 샘플코드 없이 직접 구현하려다 보니 생각할 것도 많았고, 막히는 부분도 많았습니다.
결과적으로 실무를 하기에는 아직 코딩 경험이 부족하다는 것이 큰 문제였던 것 같습니다.


p.12
앞으로도 공부한 내용을 토대로 코드를 작성하고, 피드백을 받아 수정할 것입니다.

이벤트 트리거를 사용하여 이벤트가 발생하면 조건을 판별하는 식으로 더 효율적인 코드를 만들 것입니다.

재사용가능한 코드를 만드는 것을 목표로 다양한 디자인 패턴에 대해 공부할 것입니다.
단순히 게임을 제작한다고 끝이 아니라, 더 효율적으로 작동하고 유지/보수가 쉬운 코드를 만들 수 있도록 노력할 것입니다.



